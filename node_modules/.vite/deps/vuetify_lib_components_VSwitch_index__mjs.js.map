{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSwitch/VSwitch.tsx"],
  "sourcesContent": ["// Styles\nimport './VSwitch.sass'\n\n// Components\nimport { makeSelectionControlProps, VSelectionControl } from '@/components/VSelectionControl/VSelectionControl'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VProgressCircular } from '@/components/VProgressCircular'\n\n// Composables\nimport { LoaderSlot, useLoader } from '@/composables/loader'\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utility\nimport { computed, ref } from 'vue'\nimport { filterInputAttrs, genericComponent, getUid, useRender } from '@/util'\n\n// Types\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { VSelectionControlSlots } from '@/components/VSelectionControl/VSelectionControl'\n\nexport type VSwitchSlots = VInputSlots & VSelectionControlSlots\n\nexport const VSwitch = genericComponent<VSwitchSlots>()({\n  name: 'VSwitch',\n\n  inheritAttrs: false,\n\n  props: {\n    indeterminate: Boolean,\n    inset: Boolean,\n    flat: Boolean,\n    loading: {\n      type: [Boolean, String],\n      default: false,\n    },\n\n    ...makeVInputProps(),\n    ...makeSelectionControlProps(),\n  },\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': () => true,\n    'update:indeterminate': (val: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const indeterminate = useProxiedModel(props, 'indeterminate')\n    const model = useProxiedModel(props, 'modelValue')\n    const { loaderClasses } = useLoader(props)\n    const { isFocused, focus, blur } = useFocus(props)\n\n    const loaderColor = computed(() => {\n      return typeof props.loading === 'string' && props.loading !== ''\n        ? props.loading\n        : props.color\n    })\n\n    const uid = getUid()\n    const id = computed(() => props.id || `switch-${uid}`)\n\n    function onChange () {\n      if (indeterminate.value) {\n        indeterminate.value = false\n      }\n    }\n\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const [inputProps, _1] = filterInputProps(props)\n      const [controlProps, _2] = VSelectionControl.filterProps(props)\n      const control = ref<VSelectionControl>()\n\n      function onClick () {\n        control.value?.input?.click()\n      }\n\n      return (\n        <VInput\n          class={[\n            'v-switch',\n            { 'v-switch--inset': props.inset },\n            { 'v-switch--indeterminate': indeterminate.value },\n            loaderClasses.value,\n          ]}\n          { ...inputAttrs }\n          { ...inputProps }\n          id={ id.value }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n              isValid,\n            }) => (\n              <VSelectionControl\n                ref={ control }\n                { ...controlProps }\n                v-model={ model.value }\n                id={ id.value }\n                aria-describedby={ messagesId.value }\n                type=\"checkbox\"\n                onUpdate:modelValue={ onChange }\n                aria-checked={ indeterminate.value ? 'mixed' : undefined }\n                disabled={ isDisabled.value }\n                readonly={ isReadonly.value }\n                onFocus={ focus }\n                onBlur={ blur }\n                { ...controlAttrs }\n              >\n                {{\n                  ...slots,\n                  default: () => (<div class=\"v-switch__track\" onClick={ onClick }></div>),\n                  input: ({ textColorClasses, textColorStyles }) => (\n                    <div\n                      class={[\n                        'v-switch__thumb',\n                        textColorClasses.value,\n                      ]}\n                      style={ textColorStyles.value }\n                    >\n                      { props.loading && (\n                        <LoaderSlot\n                          name=\"v-switch\"\n                          active\n                          color={ isValid.value === false ? undefined : loaderColor.value }\n                        >\n                          { slotProps => (\n                            slots.loader\n                              ? slots.loader(slotProps)\n                              : (\n                                  <VProgressCircular\n                                    active={ slotProps.isActive }\n                                    color={ slotProps.color }\n                                    indeterminate\n                                    size=\"16\"\n                                    width=\"2\"\n                                  />\n                              )\n                          )}\n                        </LoaderSlot>\n                      )}\n                    </div>\n                  ),\n                }}\n              </VSelectionControl>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSwitch = InstanceType<typeof VSwitch>\n"],
  "mappings": "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",
  "names": ["VSwitch", "genericComponent", "name", "inheritAttrs", "props", "indeterminate", "Boolean", "inset", "flat", "loading", "type", "String", "default", "makeVInputProps", "makeSelectionControlProps", "emits", "focused", "update:modelValue", "val", "setup", "_ref", "attrs", "slots", "useProxiedModel", "model", "loaderClasses", "useLoader", "isFocused", "focus", "blur", "useFocus", "loaderColor", "computed", "color", "uid", "getUid", "id", "onChange", "value", "useRender", "inputAttrs", "controlAttrs", "filterInputAttrs", "inputProps", "_1", "filterInputProps", "controlProps", "_2", "VSelectionControl", "filterProps", "control", "ref", "onClick", "input", "click", "_createVNode", "VInput", "_mergeProps", "_ref2", "messagesId", "isDisabled", "isReadonly", "isValid", "$event", "undefined", "_ref3", "textColorClasses", "textColorStyles", "LoaderSlot", "slotProps", "loader", "VProgressCircular", "isActive"]
}
