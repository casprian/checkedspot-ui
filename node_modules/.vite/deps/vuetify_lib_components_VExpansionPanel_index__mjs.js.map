{
  "version": 3,
  "sources": ["../../vuetify/src/components/VExpansionPanel/VExpansionPanels.tsx", "../../vuetify/src/components/VExpansionPanel/VExpansionPanelTitle.tsx", "../../vuetify/src/components/VExpansionPanel/VExpansionPanelText.tsx", "../../vuetify/src/components/VExpansionPanel/VExpansionPanel.tsx"],
  "sourcesContent": ["// Styles\nimport './VExpansionPanel.sass'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType } from 'vue'\nimport type { GroupItemProvide } from '@/composables/group'\n\nexport const VExpansionPanelSymbol: InjectionKey<GroupItemProvide> = Symbol.for('vuetify:v-expansion-panel')\n\nconst allowedVariants = ['default', 'accordion', 'inset', 'popout'] as const\n\ntype Variant = typeof allowedVariants[number]\n\nexport const VExpansionPanels = genericComponent()({\n  name: 'VExpansionPanels',\n\n  props: {\n    color: String,\n    variant: {\n      type: String as PropType<Variant>,\n      default: 'default',\n      validator: (v: any) => allowedVariants.includes(v),\n    },\n    readonly: Boolean,\n\n    ...makeGroupProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  emits: {\n    'update:modelValue': (val: unknown) => true,\n  },\n\n  setup (props, { slots }) {\n    useGroup(props, VExpansionPanelSymbol)\n\n    const { themeClasses } = provideTheme(props)\n\n    const variantClass = computed(() => props.variant && `v-expansion-panels--variant-${props.variant}`)\n\n    provideDefaults({\n      VExpansionPanel: {\n        color: toRef(props, 'color'),\n      },\n      VExpansionPanelTitle: {\n        readonly: toRef(props, 'readonly'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-expansion-panels',\n          themeClasses.value,\n          variantClass.value,\n        ]}\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanels = InstanceType<typeof VExpansionPanels>\n", "// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VIcon } from '@/components/VIcon'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\ninterface ExpansionPanelTitleSlot {\n  collapseIcon: IconValue\n  disabled: boolean | undefined\n  expanded: boolean\n  expandIcon: IconValue\n  readonly: boolean\n}\n\nexport type VExpansionPanelTitleSlots = {\n  default: [ExpansionPanelTitleSlot]\n  actions: [ExpansionPanelTitleSlot]\n}\n\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand',\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse',\n  },\n  hideActions: Boolean,\n  ripple: {\n    type: [Boolean, Object],\n    default: false,\n  },\n  readonly: Boolean,\n}, 'v-expansion-panel-title')\n\nexport const VExpansionPanelTitle = genericComponent<VExpansionPanelTitleSlots>()({\n  name: 'VExpansionPanelTitle',\n\n  directives: { Ripple },\n\n  props: {\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel')\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'color')\n\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n      readonly: props.readonly,\n    }))\n\n    useRender(() => (\n      <button\n        class={[\n          'v-expansion-panel-title',\n          {\n            'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n          },\n          backgroundColorClasses.value,\n        ]}\n        style={ backgroundColorStyles.value }\n        type=\"button\"\n        tabindex={ expansionPanel.disabled.value ? -1 : undefined }\n        disabled={ expansionPanel.disabled.value }\n        aria-expanded={ expansionPanel.isSelected.value }\n        onClick={ !props.readonly ? expansionPanel.toggle : undefined }\n        v-ripple={ props.ripple }\n      >\n        <span class=\"v-expansion-panel-title__overlay\" />\n\n        { slots.default?.(slotProps.value) }\n\n        { !props.hideActions && (\n          <span class=\"v-expansion-panel-title__icon\">\n            {\n              slots.actions ? slots.actions(slotProps.value)\n              : <VIcon icon={ expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon } />\n            }\n          </span>\n        )}\n      </button>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelTitle = InstanceType<typeof VExpansionPanelTitle>\n", "// Components\nimport { VExpandTransition } from '@/components/transitions'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\n\n// Utilities\nimport { inject } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\nexport const VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n\n  props: {\n    ...makeLazyProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel')\n\n    const { hasContent, onAfterLeave } = useLazy(props, expansionPanel.isSelected)\n\n    useRender(() => (\n      <VExpandTransition onAfterLeave={ onAfterLeave }>\n        <div\n          class=\"v-expansion-panel-text\"\n          v-show={ expansionPanel.isSelected.value }\n        >\n          { slots.default && hasContent.value && (\n            <div class=\"v-expansion-panel-text__wrapper\">\n              { slots.default?.() }\n            </div>\n          )}\n        </div>\n      </VExpandTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelText = InstanceType<typeof VExpansionPanelText>\n", "// Components\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VExpansionPanelText } from './VExpansionPanelText'\n\n// Composables\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeLazyProps } from '@/composables/lazy'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { computed, provide } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\nexport type VExpansionPanelSlots = {\n  default: []\n  title: []\n  text: []\n}\n\nexport const VExpansionPanel = genericComponent<VExpansionPanelSlots>()({\n  name: 'VExpansionPanel',\n\n  props: {\n    title: String,\n    text: String,\n    bgColor: String,\n\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeLazyProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce<number[]>((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index)\n      return arr\n    }, []))\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n          ]}\n          style={ backgroundColorStyles.value }\n          aria-expanded={ groupItem.isSelected.value }\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          { hasTitle && (\n            <VExpansionPanelTitle\n              key=\"title\"\n              collapseIcon={ props.collapseIcon }\n              color={ props.color }\n              expandIcon={ props.expandIcon }\n              hideActions={ props.hideActions }\n              ripple={ props.ripple }\n            >\n              { slots.title ? slots.title() : props.title }\n            </VExpansionPanelTitle>\n          )}\n\n          { hasText && (\n            <VExpansionPanelText key=\"text\" eager={ props.eager }>\n              { slots.text ? slots.text() : props.text }\n            </VExpansionPanelText>\n          )}\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n"],
  "mappings": "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",
  "names": ["VExpansionPanelSymbol", "Symbol", "for", "allowedVariants", "VExpansionPanels", "genericComponent", "name", "props", "color", "String", "variant", "type", "default", "validator", "v", "includes", "readonly", "Boolean", "makeGroupProps", "makeTagProps", "makeThemeProps", "emits", "val", "setup", "_ref", "slots", "useGroup", "themeClasses", "provideTheme", "variantClass", "computed", "provideDefaults", "VExpansionPanel", "toRef", "VExpansionPanelTitle", "useRender", "_createVNode", "tag", "value", "makeVExpansionPanelTitleProps", "propsFactory", "color", "String", "expandIcon", "type", "IconValue", "default", "collapseIcon", "hideActions", "Boolean", "ripple", "Object", "readonly", "VExpansionPanelTitle", "genericComponent", "name", "directives", "Ripple", "props", "setup", "_ref", "slots", "expansionPanel", "inject", "VExpansionPanelSymbol", "Error", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "slotProps", "computed", "disabled", "value", "expanded", "isSelected", "useRender", "_withDirectives", "_createVNode", "undefined", "toggle", "actions", "VIcon", "_resolveDirective", "VExpansionPanelText", "genericComponent", "name", "props", "makeLazyProps", "setup", "_ref", "slots", "expansionPanel", "inject", "VExpansionPanelSymbol", "Error", "hasContent", "onAfterLeave", "useLazy", "isSelected", "useRender", "_createVNode", "VExpandTransition", "default", "_withDirectives", "value", "_vShow", "VExpansionPanel", "genericComponent", "name", "props", "title", "String", "text", "bgColor", "makeElevationProps", "makeGroupItemProps", "makeLazyProps", "makeRoundedProps", "makeTagProps", "makeVExpansionPanelTitleProps", "emits", "val", "setup", "_ref", "slots", "groupItem", "useGroupItem", "VExpansionPanelSymbol", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "elevationClasses", "useElevation", "roundedClasses", "useRounded", "isDisabled", "computed", "disabled", "value", "selectedIndices", "group", "items", "reduce", "arr", "item", "index", "selected", "includes", "id", "push", "isBeforeSelected", "findIndex", "isSelected", "some", "selectedIndex", "isAfterSelected", "provide", "useRender", "hasText", "hasTitle", "_createVNode", "tag", "default", "VExpansionPanelTitle", "collapseIcon", "color", "expandIcon", "hideActions", "ripple", "VExpansionPanelText", "eager"]
}
