import {
  VSelectionControl,
  makeSelectionControlProps
} from "./chunk-D3MRH6YL.js";
import {
  VInput,
  filterInputProps,
  makeVInputProps,
  useFocus
} from "./chunk-IS7UHIDG.js";
import "./chunk-WJEY66MY.js";
import "./chunk-YSPRP6QX.js";
import {
  VProgressCircular
} from "./chunk-SRMIBR2R.js";
import {
  LoaderSlot,
  useLoader
} from "./chunk-Y4NWRSRF.js";
import "./chunk-P5XOE42H.js";
import "./chunk-LENNTCH7.js";
import "./chunk-XUIBBTZD.js";
import "./chunk-J5MDGJBS.js";
import "./chunk-3VVB75NU.js";
import "./chunk-FUBXSXV7.js";
import "./chunk-EHFC6IIS.js";
import "./chunk-PB2BKGIF.js";
import "./chunk-YHRQOC3F.js";
import "./chunk-WJY6QAYA.js";
import {
  useProxiedModel
} from "./chunk-7IGEJ4UO.js";
import "./chunk-7T6D3RP4.js";
import {
  filterInputAttrs,
  genericComponent,
  getUid,
  useRender
} from "./chunk-ZVP4GITO.js";
import {
  computed,
  createVNode,
  mergeProps,
  ref
} from "./chunk-SE5EWVSA.js";
import "./chunk-RSJERJUL.js";

// node_modules/vuetify/lib/components/VSwitch/VSwitch.mjs
import "/Users/kashif.delvi/checkedspot/checkedspot-ui/node_modules/vuetify/lib/components/VSwitch/VSwitch.css";
var VSwitch = genericComponent()({
  name: "VSwitch",
  inheritAttrs: false,
  props: {
    indeterminate: Boolean,
    inset: Boolean,
    flat: Boolean,
    loading: {
      type: [Boolean, String],
      default: false
    },
    ...makeVInputProps(),
    ...makeSelectionControlProps()
  },
  emits: {
    "update:focused": (focused) => true,
    "update:modelValue": () => true,
    "update:indeterminate": (val) => true
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const indeterminate = useProxiedModel(props, "indeterminate");
    const model = useProxiedModel(props, "modelValue");
    const {
      loaderClasses
    } = useLoader(props);
    const {
      isFocused,
      focus,
      blur
    } = useFocus(props);
    const loaderColor = computed(() => {
      return typeof props.loading === "string" && props.loading !== "" ? props.loading : props.color;
    });
    const uid = getUid();
    const id = computed(() => props.id || `switch-${uid}`);
    function onChange() {
      if (indeterminate.value) {
        indeterminate.value = false;
      }
    }
    useRender(() => {
      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs);
      const [inputProps, _1] = filterInputProps(props);
      const [controlProps, _2] = VSelectionControl.filterProps(props);
      const control = ref();
      function onClick() {
        var _a, _b;
        (_b = (_a = control.value) == null ? void 0 : _a.input) == null ? void 0 : _b.click();
      }
      return createVNode(VInput, mergeProps({
        "class": ["v-switch", {
          "v-switch--inset": props.inset
        }, {
          "v-switch--indeterminate": indeterminate.value
        }, loaderClasses.value]
      }, inputAttrs, inputProps, {
        "id": id.value,
        "focused": isFocused.value
      }), {
        ...slots,
        default: (_ref2) => {
          let {
            id: id2,
            messagesId,
            isDisabled,
            isReadonly,
            isValid
          } = _ref2;
          return createVNode(VSelectionControl, mergeProps({
            "ref": control
          }, controlProps, {
            "modelValue": model.value,
            "onUpdate:modelValue": [($event) => model.value = $event, onChange],
            "id": id2.value,
            "aria-describedby": messagesId.value,
            "type": "checkbox",
            "aria-checked": indeterminate.value ? "mixed" : void 0,
            "disabled": isDisabled.value,
            "readonly": isReadonly.value,
            "onFocus": focus,
            "onBlur": blur
          }, controlAttrs), {
            ...slots,
            default: () => createVNode("div", {
              "class": "v-switch__track",
              "onClick": onClick
            }, null),
            input: (_ref3) => {
              let {
                textColorClasses,
                textColorStyles
              } = _ref3;
              return createVNode("div", {
                "class": ["v-switch__thumb", textColorClasses.value],
                "style": textColorStyles.value
              }, [props.loading && createVNode(LoaderSlot, {
                "name": "v-switch",
                "active": true,
                "color": isValid.value === false ? void 0 : loaderColor.value
              }, {
                default: (slotProps) => slots.loader ? slots.loader(slotProps) : createVNode(VProgressCircular, {
                  "active": slotProps.isActive,
                  "color": slotProps.color,
                  "indeterminate": true,
                  "size": "16",
                  "width": "2"
                }, null)
              })]);
            }
          });
        }
      });
    });
    return {};
  }
});
export {
  VSwitch
};
//# sourceMappingURL=vuetify_lib_components_VSwitch_index__mjs.js.map
